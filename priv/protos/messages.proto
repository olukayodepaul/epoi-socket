syntax = "proto3";

package dart_exchage_protocol;

// ----------------------------------------------
// Core message exchanged between clients/devices
// ----------------------------------------------
message Message {
  // Unique ID generated by the sender for tracking
  string client_uuid = 1;

  // Type of message (chat, ack, presence, etc.)
  MessageType type = 2;

  // Indicates if this message is ONE_TO_ONE, ONE_TO_MANY, or GROUP
  RecipientType recipient_type = 3;

  // Sender JID (e.g., user@example.com)
  string from_jid = 4;

  // Sender's device ID
  string from_device_id = 5;

  // Recipient JID (used for ONE_TO_ONE and GROUP). For ONE_TO_MANY, this may be a broadcast source.
  string to_jid = 6;

  // Recipient device ID (used mostly for ONE_TO_ONE or per-device routing)
  string to_device_id = 7;

  // Unix timestamp for when message was sent
  int64 timestamp = 8;

  // Message payload: can be content, presence, or acknowledgment
  oneof payload {
    Content content = 9;
    Acknowledgement acknowledgement = 10;
    Presence presence = 11;
  }

  // If true, message is temporary (ephemeral)
  bool ephemeral = 12;

  // Optional expiration time for ephemeral messages (Unix timestamp)
  int64 expiry_timestamp = 13;

  // List of recipients (used only when recipient_type == ONE_TO_MANY)
  repeated string to_jid_list = 14;

  // Optional flag to indicate if this is a broadcast message
  bool is_broadcast = 15;
}

// ----------------------------------------------
// Content block: text, media, encrypted payload
// ----------------------------------------------
message Content {
  oneof type {
    string text_message = 1;         // Simple text
    ImageMessage image = 2;          // Image with caption
    VideoMessage video = 3;          // Video file
    AudioMessage audio = 4;          // Audio file
    EncryptedPayload encrypted = 5;  // Encrypted message content
  }
}

// ----------------------------------------------
// Used to confirm receipt or read status of a message
// ----------------------------------------------
message Acknowledgement {
  string acknowledged_uuid = 1;       // UUID of the original message
  AcknowledgementType ack_type = 2;   // Delivered, Read, etc.
  int64 timestamp = 3;                // When the ack was generated
}

// ----------------------------------------------
// Presence updates: online, offline, typing, etc.
// ----------------------------------------------
message Presence {
  PresenceStatus status = 1;          // Current presence
  string device_id = 2;               // Which device reports it
  int64 last_seen = 3;                // Optional last seen info
}

// ----------------------------------------------
// Image message block
// ----------------------------------------------
message ImageMessage {
  string url = 1;                     // CDN or signed URL
  string caption = 2;                 // Caption or description
  int32 width = 3;
  int32 height = 4;
}

// ----------------------------------------------
// Video message block
// ----------------------------------------------
message VideoMessage {
  string url = 1;                     // Video URL
  string caption = 2;
  int32 duration_seconds = 3;
}

// ----------------------------------------------
// Audio message block
// ----------------------------------------------
message AudioMessage {
  string url = 1;                     // Audio file URL
  int32 duration_seconds = 2;
}

// ----------------------------------------------
// Secure payload container
// ----------------------------------------------
message EncryptedPayload {
  bytes ciphertext = 1;              // Encrypted bytes
  bytes iv = 2;                      // Initialization vector
  bytes mac = 3;                     // Message authentication code
  string encryption_type = 4;        // E.g., "AES-GCM", "Signal"
}

// ----------------------------------------------
// Optional group metadata block (used outside core message)
// ----------------------------------------------
message GroupInfo {
  string group_id = 1;                // Group JID or unique ID
  repeated string participant_jids = 2; // List of JIDs in group
  string group_name = 3;              // Human-readable group name
  string admin_jid = 4;               // Admin or owner of the group
}

// ----------------------------------------------
// Message intent/type
// ----------------------------------------------
enum MessageType {
  CHAT = 0;               // Regular message
  NOTIFICATION = 1;       // App/system notification
  CHAT_TYPING = 2;        // Typing indicator
  ACTIVITY = 3;           // Joined, left, renamed, etc.
  ACKNOWLEDGEMENT = 4;    // Receipt (delivered/read)
  PRESENCE_UPDATE = 5;    // Online/offline status
}

// ----------------------------------------------
// Delivery/read acknowledgement status
// ----------------------------------------------
enum AcknowledgementType {
  DELIVERED = 0;          // Message delivered
  READ = 1;               // Message read
}

// ----------------------------------------------
// Who receives the message
// ----------------------------------------------
enum RecipientType {
  ONE_TO_ONE = 0;         // Sent to a single JID
  ONE_TO_MANY = 1;        // Broadcast message
  GROUP = 2;              // Group chat (threaded)
}

// ----------------------------------------------
// Presence states for user/device
// ----------------------------------------------
enum PresenceStatus {
  ONLINE = 0;
  OFFLINE = 1;
  AWAY = 2;
  TYPING = 3;
}
