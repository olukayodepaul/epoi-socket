syntax = "proto3";

package bimip;

// ---------------- Identity ----------------
// Represents a user and optionally a specific device/session
message Identity {
  string eid = 1;                               // User’s global identifier (e.g., account ID or JID)
  optional string connection_resource_id = 2;   // Identifier for a specific device or session instance
}

// ---------------- AwarenessNotification ----------------
// Sends a user’s awareness (presence, location, and status) to other users
message AwarenessNotification {
  Identity from = 1;                 // Sender (uses eid only)
  Identity to = 2;                   // Recipient (uses eid only)
  int32 status = 3;                  // Presence state: 1=ONLINE, 2=OFFLINE, 3=AWAY, 4=BUSY, 5=DND, 6=INVISIBLE, 7=IDLE, 8=UNKNOWN
  int64 last_seen = 4;               // Last active time (Unix UTC, ms)
  double latitude = 5;               // Latitude
  double longitude = 6;              // Longitude
  int32 awareness_intention = 7;     // Broadcast control: 1=DO_NOT_BROADCAST, 2=BROADCAST
}

// ---------------- ErrorMessage ----------------
// Represents an error response with code, description, and optional details
message ErrorMessage {
  int32 code = 1;       // Numeric error code
  string message = 2;   // Short error description
  string route = 3;     // Route or context where the error occurred
  string details = 4;   // Additional error details (optional)
}

// ---------------- LogoutMessage ----------------
// Uses both eid and connection_resource_id to log out a specific device
message Logout {
  Identity to = 1;      // The user/device performing logout
  int32 type = 2;           // 1 = REQUEST, 2 = RESPONSE
  int32 status = 3;         // 1 = DISCONNECT, 2 = FAIL, 3 = SUCCESS, 4 = PENDING
  int64 timestamp = 4;      // Unix UTC timestamp (ms) of the action
}

// ---------------- PingPong ----------------
// Heartbeat messages from client to server to check connectivity of a specific device (Identity includes both eid and connection_resource_id)
// Client generates ping_id; server echoes it back in PONG with pong_time
message PingPong {
  Identity to = 1;              // Server identity, includes both eid and connection_resource_id to identify the target device/session
  int32 type = 2;               // Message type: 1=PING (from client), 2=PONG (from server)
  int64 ping_time = 3;          // Timestamp when client sent the PING (Unix UTC, ms)
  int64 pong_time = 4;          // Timestamp when server sent the PONG (Unix UTC, ms)
  string ping_id = 5;           // Unique identifier for this PING, generated by client and echoed in PONG
}

// ---------------- MessageScheme ----------------
// Wrapper for all messaging protocol types
message MessageScheme {
  int64 route = 1;  // Unique route identifier for message routing

  oneof payload {
    AwarenessNotification awareness_notification  = 2;  // User awareness/presence update
    PingPong ping_pong                            = 6;
    Logout logout                                 = 12; // Logout message
    ErrorMessage error                            = 15; // Error message
  }
}